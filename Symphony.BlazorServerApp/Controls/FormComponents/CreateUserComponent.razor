@using Symphony.ViewModels.Consult
@inject UserManager<AppUser> userManager
@inject RoleManager<AppRole> roleManager
@inject NavigationManager Nav

<EditForm Model="@InputUser" OnValidSubmit="CreateUser" class="row g-3">
    <DataAnnotationsValidator />
    <div class="col-md-6">
        <label class="form-label fw-bold">@nameof(InputUser.FirstName) <span class="text-danger fw-bold">*</span></label>
        <InputText @bind-Value="InputUser.FirstName" class="form-control" />
        <ValidationMessage For="@(() => InputUser.FirstName)" />
    </div>
    <div class="col-md-6">
        <label class="form-label fw-bold">@nameof(InputUser.LastName) <span class="text-danger fw-bold">*</span></label>
        <InputText @bind-Value="InputUser.LastName" class="form-control" />
        <ValidationMessage For="@(() => InputUser.LastName)" />
    </div>
    <div class="col-md-5">
        <label class="form-label fw-bold">@nameof(InputUser.PhoneNumber) <span class="text-danger fw-bold">*</span></label>
        <InputText @bind-Value="InputUser.PhoneNumber" class="form-control" />
        <ValidationMessage For="@(() => InputUser.PhoneNumber)" />
    </div>
    <div class="col-md-3">
        <div class="row">
            <label class="form-label col-12 fw-bold">@nameof(InputUser.Gender) <span class="text-danger fw-bold">*</span></label>
            <div class="col-12">
                <div class="form-check form-check-inline">
                    <input @onclick="() =>  InputUser.Gender = 'M'" class="form-check-input" type="radio" name="inlineRadioOptions" id="inlineRadio1">
                    <label class="form-check-label" for="inlineRadio1">Male</label>
                </div>
                <div class="form-check form-check-inline">
                    <input @onclick="() => InputUser.Gender = 'F'" class="form-check-input" type="radio" name="inlineRadioOptions" id="inlineRadio2">
                    <label class="form-check-label" for="inlineRadio2">Female</label>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <label class="form-label fw-bold">@nameof(InputUser.DOB) <span class="text-danger fw-bold">*</span></label>
        <InputDate @bind-Value="InputUser.DOB" class="form-control" />
        <ValidationMessage For="@(() => InputUser.DOB)" />
    </div>
    <div class="col-md-12">
        <label class="form-label fw-bold">@nameof(InputUser.Email) <span class="text-danger fw-bold">*</span></label>
        <InputText @bind-Value="InputUser.Email" class="form-control" />
        <ValidationMessage For="@(() => InputUser.Email)" />
    </div>
    <div class="col-md-12">
        <label class="form-label fw-bold">@nameof(InputUser.Password) <span class="text-danger fw-bold">*</span></label>
        <InputText @bind-Value="InputUser.Password" class="form-control" type="password" />
        <ValidationMessage For="@(() => InputUser.Password)" />
    </div>
    <div class="col-md-12">
        <label class="form-label fw-bold">@nameof(InputUser.ConfirmPassword) <span class="text-danger fw-bold">*</span></label>
        <InputText @bind-Value="InputUser.ConfirmPassword" class="form-control" type="password" />
        <ValidationMessage For="@(() => InputUser.ConfirmPassword)" />
    </div>
    <CreateButtonForForm />
</EditForm>

@code {
    #region Parameter
    public CreateAppUserVM InputUser { get; set; } = new();

    [Parameter]
    public string CreateWho { get; set; }

    #endregion

    private async Task CreateUser()
    {
        if (InputUser is not null)
        {
            var user = new AppUser
            {
                FirstName = InputUser.FirstName,
                LastName = InputUser.LastName,
                PhoneNumber = InputUser.PhoneNumber,
                DOB = InputUser.DOB,
                Email = InputUser.Email,
                UserName = InputUser.Email,
                Gender = InputUser.Gender,
                EmailConfirmed = true,
                CreatedAt = DateTime.Now
            };

            var result = await userManager.CreateAsync(user, InputUser.Password);

            if (result.Succeeded)
            {
                if (CreateWho == "admin")
                {
                    var role = await roleManager.FindByNameAsync("admin");

                    await userManager.AddToRoleAsync(user, role.Name);

                    Nav.NavigateTo("/admin/userManagement/adminManager");
                }
                else if (CreateWho == "teacher")
                {
                    var role = await roleManager.FindByNameAsync("teacher");

                    await userManager.AddToRoleAsync(user, role.Name);

                    Nav.NavigateTo("/admin/userManagement/teacherManager");
                }
                else
                {
                    var role = await roleManager.FindByNameAsync("student");

                    await userManager.AddToRoleAsync(user, role.Name);

                    Nav.NavigateTo("/admin/userManagement/userManager");
                }
            }
        }
    }
}
