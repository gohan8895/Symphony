@typeparam TItem

<div class="table-responsive">
   
    <table class="table caption-top table-bordered shadow-sm table-striped table-hover">
        <caption>List of @Caption</caption>
        <thead class="text-white fw-bold" style="background-color: #3A0647; ">
            <tr>
                @TableHeader
            </tr>
        </thead>
        <tbody>
            @foreach (var item in ItemList)
            {
                <tr>@RowTemplate(item)</tr>
            }
        </tbody>
    </table>
</div>
<nav aria-label="...">
    <ul class="pagination" style="justify-content:center;">
        <li class="page-item " @onclick="@(e=>NavigateTo("first"))"><span class="page-link">First</span> </li>

        <li class="page-item" @onclick="@(e=>NavigateTo("prev"))"><span class="page-link">Prev</span></li>

        @for (int i = 0; i < TotalPages; i++)
        {
            var pageNumber = i;
            <li class="@(CurrentPage==pageNumber?"page-item":"page-item active") " @onclick="()=>UpdateList(pageNumber)"><span class="page-link">@(i+1)</span> </li>
        }
        <li class="page-item page-link" @onclick="@(e=>NavigateTo("next"))">Next</li>
        <li class="page-item page-link" @onclick="@(e=>NavigateTo("last"))">Last</li>

    </ul>
    </nav>
    <nav aria-label="...">
        <ul class="pagination">
            <li class="page-item disabled">
                <a class="page-link" href="#" tabindex="-1" aria-disabled="true">Previous</a>
            </li>
            <li class="page-item"><a class="page-link" href="#">1</a></li>
            <li class="page-item active" aria-current="page">
                <a class="page-link" href="#">2</a>
            </li>
            <li class="page-item"><a class="page-link" href="#">3</a></li>
            <li class="page-item">
                <a class="page-link" href="#">Next</a>
            </li>
        </ul>
    </nav>

    @code {
        [Parameter]
        public string Caption { get; set; }

        [Parameter]
        public RenderFragment TableHeader { get; set; }

        [Parameter]
        public RenderFragment<TItem> RowTemplate { get; set; }

        [Parameter]
        public IReadOnlyList<TItem> Items { get; set; }

        public IReadOnlyList<TItem> ItemList { get; set; }
        public int PageSize { get; set; }
        public int TotalPages { get; set; }

        public int CurrentPage { get; set; }


        protected override void OnParametersSet()
        {
            PageSize = 10;
            ItemList = Items.Take(PageSize).ToList();
            TotalPages = (int)Math.Ceiling(Items.Count() / (decimal)PageSize);
            if (TotalPages < 1)
            {
                TotalPages = 1;
            }
        }

        private void UpdateList(int pageNumber)
        {

            ItemList = Items.Skip(pageNumber * PageSize).Take(PageSize).ToList();
            CurrentPage = pageNumber;
        }

        private void NavigateTo(string direction)
        {
            if (direction == "prev" && CurrentPage != 0)
            {
                CurrentPage -= 1;
            }
            if (direction == "next" && CurrentPage != TotalPages - 1)
            {
                CurrentPage += 1;
            }
            if (direction == "first")
            {
                CurrentPage = 0;
            }
            if (direction == "last")
            {
                CurrentPage = TotalPages - 1;
            }
            UpdateList(CurrentPage);
        }

    }
