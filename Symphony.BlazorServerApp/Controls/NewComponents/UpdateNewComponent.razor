
@inject INewService newService
@using Symphony.ViewModels.Consult
@using Symphony.BlazorServerApp.Services.NewService
@inject NavigationManager Nav
@using Symphony.BlazorServerApp.Controls.Utilities

<EditForm Model="@InputNew" OnValidSubmit="UpdateNew" class="row g-3">
    <DataAnnotationsValidator />
    <div class="col-md-12">
        <label class="form-label fw-bold">@nameof(InputNew.Title) <span class="text-danger fw-bold">*</span></label>
        <InputText @bind-Value="InputNew.Title" class="form-control" />
        <ValidationMessage For="@(() => InputNew.Title)" />
    </div>
    <div class="col-md-12">
        <label class="form-label fw-bold">@nameof(InputNew.Description) <span class="text-danger fw-bold">*</span></label>
        <InputText @bind-Value="InputNew.Description" class="form-control" />
        <ValidationMessage For="@(() => InputNew.Description)" />
    </div>
    <div class="col-md-6">
        <label class="form-label fw-bold">@nameof(InputNew.IsShown) <span class="text-danger fw-bold">*</span></label>
        <input type="checkbox" @bind-value="InputNew.IsShown" />
        <ValidationMessage For="@(() => InputNew.IsShown)" />
    </div>

    <CreateButtonForForm />
</EditForm>
@code {
    #region Parameter
    public UpdateNewsVM InputNew { get; set; } = new();

    [Parameter]
    public int newId { get; set; }

    #endregion

    protected async override Task OnInitializedAsync()
    {
        var newItem = await newService.GetNewAsync(newId);

        InputNew = new UpdateNewsVM
        {
            Id = newItem.Id,
            Title = newItem.Title,
            Description = newItem.Description,
            IsShown = newItem.IsShown
        };
    }

    private async Task UpdateNew()
    {

        await newService.UpdateAsync(InputNew);

        Nav.NavigateTo("/admin/faq/");

    }
}
