@using Symphony.BlazorServerApp.Services.SubjectServices
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Hosting

@inject IWebHostEnvironment Environment
@inject ISubjectService subjectService
@inject IHttpClientFactory ClientFactory

@*
    Auto send input
*@

    <div id="#fileUp" class="col-lg-12 my-2">
        <label class="form-label fw-bold">@nameof(SubjectVM.Files)</label>
        <InputFile OnChange="@OnInputChanged" class="form-control" accept=".docx, .doc, .xlsx, .pdf, .pptx" multiple />
    </div>

<div class="toast fw-bold align-items-center text-white @(IsSuccess ? "bg-success" : "bg-danger") border-0" role="alert" aria-live="assertive" aria-atomic="true">
    <div class="d-flex">
        <div class="toast-body">
            @(IsSuccess ? "Images uploaded successfully!" : "Something went wrong, please try again!").
        </div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
    </div>
</div>


@code {
    [Parameter]
    public SubjectVM SubjectVM { get; set; }
    private MultipartFormDataContent content = new();
    #region constant

    private bool shouldRender;
    private bool IsSuccess;
    private bool upload;
    private const long maxFileSize = 1024 * 1024 * 15;
    private const int maxAllowedFiles = 3;

    #endregion
    protected override bool ShouldRender() => shouldRender;

    private async Task OnInputChanged(InputFileChangeEventArgs e)
    {
        shouldRender = false;
        upload = false;

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));

                fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

                content.Add(
                    content: fileContent,
                    name: "\"files\"",
                    fileName: file.Name
                    );

                upload = true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        if (upload)
        {
            var client = ClientFactory.CreateClient("symphony");

            var response =
                await client.PutAsync($"subjects/update-subject-files/{SubjectVM.Id}", content);

            if (response.IsSuccessStatusCode)
            {
                IsSuccess = true;
            }
            else
            {
                IsSuccess = false;
            }
        }
        StateHasChanged();
        shouldRender = true;
    }

    @*private async Task UpdateFiles()
        {
            if (upload)
            {
                var response = await subjectService.UpdateSubjectFilesVMAsync(SubjectVM.Id, content);

                if (response == 1)
                {
                    IsSuccess = true;
                }
                else
                {
                    IsSuccess = false;
                }
            }
            StateHasChanged();
            shouldRender = true;
        }*@
}
