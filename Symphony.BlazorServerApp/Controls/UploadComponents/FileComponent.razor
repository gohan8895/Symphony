@using Symphony.BlazorServerApp.Services.SubjectServices 
@using System
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Hosting

@inject IWebHostEnvironment Environment
@inject ISubjectService subjectService
@inject IHttpClientFactory ClientFactory

<div id="#fileUp" class="col-lg-6 my-2">
    <label class="form-label fw-bold">@nameof(SubjectVM.Files) </label>
    <InputFile OnChange="@AddFiles" class="form-control" accept=".docx, .doc, .xlsx, .pdf, .pptx" multiple />
</div>


@code {
    #region parameter
    [Parameter]
    public SubjectVM SubjectVM { get; set; }
    #endregion

    private bool shouldRender;
    private bool IsSuccess;
    private bool upload;

    #region constant

    private const long maxFileSize = 1024 * 1024 * 15;
    private const int maxAllowedFiles = 3;

    #endregion

    protected override bool ShouldRender() => shouldRender;

    private async Task AddFiles(InputFileChangeEventArgs e)
    {
        shouldRender = false;
        upload = false;

        using var content = new MultipartFormDataContent();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));

                fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

                content.Add(
                    content: fileContent,
                    name: "\"files\"",
                    fileName: file.Name
                    );

                upload = true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        if (upload)
        {
            var client = ClientFactory.CreateClient("symphony");

            var response = await client.PutAsync($"subjects/update-subject-files/{SubjectVM.Id}", content);

            if (response.IsSuccessStatusCode)
            {
                IsSuccess = true;
            }
            else
            {
                IsSuccess = false;
            }
        }
        StateHasChanged();
        shouldRender = true;
    }
}
