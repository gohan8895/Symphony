@using Symphony.ViewModels.CourseViewModel
@using Symphony.BlazorServerApp.Services.CourseServices
@using System.Net.Http.Headers

@inject ICourseService courseService

<EditForm Model="@Course" OnValidSubmit="@UpdateImage">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div id="#imageUp" class="mb-2">
        <label class="form-label fw-bold">@nameof(Course.ImagePath)</label>
        <InputFile OnChange="@OnInputChanged" class="form-control" accept=".jpg , .png, .jpeg" />
    </div>
    <div class="border-1 rounded-1">
        <img src="@imageDataUri" class="p-1 w-auto" height="100" />
    </div>
    <CreateButtonForForm FirstBtn="Update Existing" />
</EditForm>

<div class="toast fw-bold align-items-center text-white @(IsSuccess ? "bg-success" : "bg-danger") border-0" role="alert" aria-live="assertive" aria-atomic="true">
    <div class="d-flex">
        <div class="toast-body">
            @(IsSuccess ? "Images uploaded successfully!" : "Something went wrong, please try again!").
        </div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
    </div>
</div>

@code {
    [Parameter]
    public CourseWithSubjects Course { get; set; }
    private string imageDataUri { get; set; } = string.Empty;
    private MultipartFormDataContent content = new();
    #region constant

    private bool shouldRender;
    private bool IsSuccess;
    private bool upload;
    private const long maxFileSize = 1024 * 1024 * 15;
    private const int maxAllowedFiles = 3;

    #endregion
    protected override bool ShouldRender() => shouldRender;

    private async Task OnInputChanged(InputFileChangeEventArgs e)
    {
        shouldRender = false;
        upload = false;

        try
        {
            var fileContent = new StreamContent(e.File.OpenReadStream(maxFileSize));

            fileContent.Headers.ContentType = new MediaTypeHeaderValue(e.File.ContentType);

            content.Add(
                content: fileContent,
                name: "\"image\"",
                fileName: e.File.Name
                );

            //Show images to browser
            var imageFile = await e.File.RequestImageFileAsync("image", maxWith: 640, maxHeight: 480);
            using Stream fileStream = imageFile.OpenReadStream(maxAllowedSize: maxFileSize);

            using MemoryStream ms = new();
            await fileStream.CopyToAsync(ms);

            imageDataUri = $"data:image/jpeg;base64,{Convert.ToBase64String(ms.ToArray())}";
            //

            upload = true;
        }
        catch (Exception ex)
        {
            throw ex;
        }

        shouldRender = true;
    }

    private async Task UpdateImage()
    {
        if (upload)
        {
            var response = await courseService.UpdateImageAsync(Course.Id, content);

            if (response == 1)
            {
                IsSuccess = true;
            }
            else
            {
                IsSuccess = false;
            }
        }
        StateHasChanged();
        shouldRender = true;
    }
}