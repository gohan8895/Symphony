@page "/admin/batchManagement"

@using Symphony.BlazorServerApp.Services.BatchServices
@using Symphony.BlazorServerApp.Controls.TableComponents
@using Symphony.ViewModels.VMs

@inject IBatchService batchService;

<AuthorizeView Roles="admin">
    <Authorized>
        <div class="container-lg">
            @if (Batches is null)
            {
                <div class="text-center">
                    <div class="loadingio-spinner-bars-f8jbu6upslt">
                        <div class="ldio-p5olh5z9oq">
                            <div></div><div></div><div></div><div></div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <h1 class="text-center fw-bolder">Registration Manager</h1>
                <CreateButton Url="/admin/batchManagement/create" Who="a New Batch" />
                <TableTemplate Caption="Batches" Items="Batches" Context="b">
                    <TableHeader>
                        <th>
                            <span @onclick="SortId" class="flex">
                                @nameof(Batch.Id)
                                <span class="ps-1 material-icons hover-me">
                                    @(sortId ? "arrow_downward" : "arrow_upward")
                                </span>
                            </span>
                        </th>
                        <th>
                            @nameof(Batch.Description)

                        </th>
                        <th>
                            <span @onclick="SortStart" class="flex">
                                Start Date
                                <span class="ps-1 material-icons hover-me">
                                    @(sortStart ? "arrow_downward" : "arrow_upward")
                                </span>
                            </span>
                        </th>
                        <th>
                            <div @onclick="SortEnd" class="flex">
                                End Date
                                <span class="ps-1 material-icons hover-me">
                                    @(sortEnd ? "arrow_downward" : "arrow_upward")
                                </span>
                            </div>
                        </th>
                        <th>
                            <div @onclick="SortCreateAt" class="flex">
                                Created At
                                <span class="ps-1 material-icons hover-me">
                                    @(sortCreate ? "arrow_downward" : "arrow_upward")
                                </span>
                            </div>
                        </th>
                        <th></th>
                    </TableHeader>
                    <RowTemplate>
                        <td>
                            <a class="batch-id fw-bold" href="/admin/batchManagement/@b.Id">@b.Id</a>
                        </td>
                        <td>@b.Description</td>
                        <td>@b.StartDate.ToShortDateString()</td>
                        <td>@b.EndDate.ToShortDateString()</td>
                        <td>@b.CreatedAt.ToShortDateString()</td>
                        <td class="text-center flex justify-content-center">
                            <a class="btn material-icons text-warning"
                               data-bs-toggle="tooltip" data-bs-placement="right"
                               title="Go to edit page" href="admin/batchManagement/edit/@b.Id">update</a>
                        </td>
                    </RowTemplate>
                </TableTemplate>
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <UnauthorizedAccess />
    </NotAuthorized>
</AuthorizeView>

@code {
    #region param & prop
    private List<BatchVM> Batches { get; set; }
    private BatchVM Batch { get; set; }
    #endregion

    #region filter
    private bool sortId = false;
    private bool sortStart = false;
    private bool sortEnd = false;
    private bool sortCreate = false;
    #endregion

    protected async override Task OnInitializedAsync()
    {
        Batches = (await batchService.GetBatchesVMsAsync()).ToList();
    }

    #region fiter logic
    private void SortId()
    {
        if (sortId)
        {
            Batches = Batches.OrderBy(r => r.Id).ToList();
            sortId = !sortId;
        }
        else
        {
            Batches = Batches.OrderByDescending(r => r.Id).ToList();
            sortId = !sortId;
        }
    }
    private void SortStart()
    {
        if (sortStart)
        {
            Batches = Batches.OrderBy(r => r.StartDate).ToList();
            sortStart = !sortStart;
        }
        else
        {
            Batches = Batches.OrderByDescending(r => r.StartDate).ToList();
            sortStart = !sortStart;
        }
    }
    private void SortEnd()
    {
        if (sortEnd)
        {
            Batches = Batches.OrderBy(r => r.EndDate).ToList();
            sortEnd = !sortEnd;
        }
        else
        {
            Batches = Batches.OrderByDescending(r => r.EndDate).ToList();
            sortEnd = !sortEnd;
        }
    }
    private void SortCreateAt()
    {
        if (sortCreate)
        {
            Batches = Batches.OrderBy(r => r.CreatedAt).ToList();
            sortCreate = !sortCreate;
        }
        else
        {
            Batches = Batches.OrderByDescending(r => r.CreatedAt).ToList();
            sortCreate = !sortCreate;
        }
    }
    #endregion
}
