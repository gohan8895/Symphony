@page "/admin/subject/{id:int}"

@using Symphony.BlazorServerApp.Services.SubjectServices
@using System.Net.Http.Headers
@using Symphony.ViewModels.VMs

@inject ISubjectService subjectService
@inject IHttpClientFactory ClientFactory

<AuthorizeView Roles="admin" Context="subjectDetail">
    <Authorized>
        @if (Subject is null)
        {
            <div class="text-center">
                <div class="loadingio-spinner-bars-f8jbu6upslt">
                    <div class="ldio-p5olh5z9oq">
                        <div></div><div></div><div></div><div></div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="container-lg">
                <h1 class="text-center fw-bolder">Subject Manager</h1>
                <div class="main-content flex">
                    <ul>
                        <li>
                            <span class="fw-bolder pe-2">@nameof(Subject.Id):</span>@Subject.Id
                        </li>
                        <li>
                            <span class="fw-bolder pe-2">@nameof(Subject.Name):</span>@Subject.Name
                        </li>
                        <li>
                            <span class="fw-bolder pe-2">@nameof(Subject.Description):</span>@Subject.Description
                        </li>
                        <li>
                            <span class="fw-bolder pe-2">@nameof(Subject.Duration):</span>@Subject.Duration Hours
                        </li>
                        <li>
                            <span class="fw-bolder pe-2">@nameof(Subject.Price):</span>$ @Subject.Price
                        </li>
                    </ul>
                    <aside>
                        <div class="subject-image">
                            @if (Subject.Images is not null)
                            {
                                @foreach (var image in Subject.Images)
                                {
                                    <div class="images">
                                        <img class="rounded-1" src="http:/localhost:39699/@image.Path" />
                                    </div>
                                }
                            }
                            else
                            {
                                <p>There is no image upload for this Subject yet. <a href="#imageUp">Upload one?</a></p>
                            }
                        </div>
                        <div class="subject-file flex">
                            <h3 class="fw-bold">Files:</h3>
                            @if (Subject.Files is not null)
                            {
                                <ul>
                                    @foreach (var file in Subject.Files)
                                    {
                                        <li>@file.FileName.Humanize() <span class="ps-5 material-icons btn">files</span></li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <p>There is no file upload for this Subject yet. <a href="#fileUp">Upload one?</a></p>
                            }
                        </div>
                    </aside>
                </div>
                <div class="upload flex">
                    <div class="images-upload">
                        <EditForm Model="Subject" OnValidSubmit="UpdateImages">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div id="#imageUp" class="mb-2">
                                <label class="form-label fw-bold">@nameof(SubjectVM.Images)</label>
                                <InputFile OnChange="@OnInputImageChanged" class="form-control" accept=".jpg , .png, .jpeg" multiple />
                            </div>
                            <div class="border-1 rounded-1">
                                @foreach (var uri in imageDataUris)
                                {
                                    <img src="@uri" class="p-1 w-auto" height="100" />
                                }
                            </div>
                            <CreateButtonForForm FirstBtn="Update Existing" />
                        </EditForm>
                    </div>
                    <div class="files-upload">
                        <div id="#fileUp" class="my-2">
                            <label class="form-label fw-bold">@nameof(Subject.Files)</label>
                            <InputFile OnChange="@OnInputFileChanged" class="form-control" accept=".docx, .doc, .xlsx, .pdf, .pptx" multiple />
                        </div>
                    </div>
                </div>
                <div class="navigator flex">
                    <div>
                        <a href="admin/subject" class="back">
                            Go back to subject manager <span class="ps-3 material-icons">chevron_left</span>
                        </a>
                    </div>
                    <div>
                        <a href="admin/subject/edit/@Subject.Id" class="edit">
                            Edit this subject <span class="ps-3 material-icons">edit</span>
                        </a>
                    </div>
                </div>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <UnauthorizedAccess />
    </NotAuthorized>
</AuthorizeView>

@code {
    #region Parameter & props
    [Parameter]
    public int Id { get; set; }
    private SubjectVM Subject { get; set; } = new();

    private List<string> imageDataUris { get; set; } = new();
    private MultipartFormDataContent content = new();
    private MultipartFormDataContent contentForFile = new();

    #endregion

    protected async override Task OnParametersSetAsync()
    {
        Subject = await subjectService.GetSubjectVMAsync(id: Id);
    }

    #region constant

    private bool upload;
    private const long maxFileSize = 1024 * 1024 * 15;
    private const int maxAllowedFiles = 3;

    #endregion

    #region image upload
    private async Task OnInputImageChanged(InputFileChangeEventArgs e)
    {
        upload = false;

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));

                fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

                content.Add(
                    content: fileContent,
                    name: "\"images\"",
                    fileName: file.Name
                    );

                //Show images to browser
                var imageFile = await file.RequestImageFileAsync("image", maxWith: 640, maxHeight: 480);
                using Stream fileStream = imageFile.OpenReadStream(maxAllowedSize: maxFileSize);

                using MemoryStream ms = new();
                await fileStream.CopyToAsync(ms);

                imageDataUris.Add($"data:image/jpeg;base64,{Convert.ToBase64String(ms.ToArray())}");
                //

                upload = true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
    }

    private async Task UpdateImages()
    {
        if (upload)
        {
            var response = await subjectService.UpdateSubjectImagesVMAsync(Subject.Id, content);

            if (response == 1)
            {
                Subject = await subjectService.GetSubjectVMAsync(id: Id);
            }
        }
    }
    #endregion

    #region file upload
    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        upload = false;

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));

                fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

                contentForFile.Add(
                    content: fileContent,
                    name: "\"files\"",
                    fileName: file.Name
                    );

                upload = true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        if (upload)
        {
            var client = ClientFactory.CreateClient("symphony");

            var response =
                await client.PutAsync($"subjects/update-subject-files/{Subject.Id}", contentForFile);

            if (response.IsSuccessStatusCode)
            {
                Subject = await subjectService.GetSubjectVMAsync(id: Id);
            }
        }
    }
    #endregion
}
