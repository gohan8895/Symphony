@page "/admin/subject"

@inject ISubjectService subjectService
@using Symphony.BlazorServerApp.Services.SubjectServices
@using Symphony.BlazorServerApp.Controls.TableComponents
@using Symphony.ViewModels.VMs

<AuthorizeView Roles="admin">
    <Authorized>
        <div class="container-lg">
            <h1 class="text-center fw-bolder">Subjects Manager</h1>
            <CreateButton Url="/admin/subject/create" Who="a New Subject" />
            <TableTemplate Caption="Subjects" Items="Subjects" Context="sub">
                <TableHeader>
                    <th>
                        <span @onclick="SortId" class="flex">
                            @nameof(Subject.Id)
                            <span class="ps-1 material-icons hover-me">
                                @(sortId ? "arrow_downward" : "arrow_upward")
                            </span>
                        </span>
                    </th>
                    <th>
                        <span @onclick="SortName" class="flex">
                            @nameof(Subject.Name)
                            <span class="ps-1 material-icons hover-me">
                                @(sortName ? "arrow_downward" : "arrow_upward")
                            </span>
                        </span>
                    </th>
                    <th>
                        @nameof(Subject.Description)
                    </th>
                    <th>
                        <span @onclick="SortPrice" class="flex">
                            @nameof(Subject.Price)
                            <span class="ps-1 material-icons hover-me">
                                @(sortPrice ? "arrow_downward" : "arrow_upward")
                            </span>
                        </span>
                    </th>
                    <th>
                        <span @onclick="SortDur" class="flex">
                            @nameof(Subject.Duration)
                            <span class="ps-1 material-icons hover-me">
                                @(sortDur ? "arrow_downward" : "arrow_upward")
                            </span>
                        </span>
                    </th>
                    <th>
                        <div @onclick="SortStatus" class="flex">
                            Status
                            <span class="ps-1 material-icons hover-me">
                                @(sortStatus ? "arrow_downward" : "arrow_upward")
                            </span>
                        </div>
                    </th>
                    <th></th>
                </TableHeader>
                <RowTemplate>
                    <td>@sub.Id</td>
                    <td>
                        <a class="subject-name fw-bold"
                           data-bs-toggle="tooltip" data-bs-placement="bottom" title="Go to detail page"
                           href="/admin/subject/@sub.Id">@sub.Name</a>
                    </td>
                    <td>@sub.Description</td>
                    <td>@sub.Price</td>
                    <td>@sub.Duration</td>
                    <td>@(sub.IsShown ? "Show" : "Hidden")</td>
                    <td class="text-center">
                        <a href="/admin/subject/edit/@sub.Id" class="material-icons btn text-warning" 
                           data-bs-toggle="tooltip" data-bs-placement="right" title="Go to edit page">
                        edit
                        </a>
                        <button @onclick="() => subjectId = sub.Id"  class="btn material-icons text-danger"
                                data-bs-toggle="modal" data-bs-target="#exampleModal">delete</button>
                    </td>
                </RowTemplate>
            </TableTemplate>
            <!-- Modal -->
            <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Remove Subject</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <p>Do you want to remove this subject?</p>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">No</button>
                            <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="() => DeleteSubject(subjectId)">
                                Yes
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <UnauthorizedAccess />
    </NotAuthorized>
</AuthorizeView>

@code {
    #region param & prop
    public List<SubjectVM> Subjects { get; set; } = new();
    public SubjectVM Subject { get; set; }
    private int subjectId { get; set; }
    #endregion

    #region other
    private bool sortId = false;
    private bool sortName = false;
    private bool sortPrice = false;
    private bool sortDur = false;
    private bool sortStatus = true;
    #endregion

    protected async override Task OnInitializedAsync()
    {
        Subjects = (await subjectService.GetSubjectVMsAsync()).ToList();
    }

    private async Task DeleteSubject(int id)
    {
        var sub = Subjects.FirstOrDefault(s => s.Id == id);
        if (id != 0) await subjectService.ChangeSubjectState(id);

        Subjects.Remove(sub);
    }

    #region fiter logic
    private void SortId()
    {
        if (sortId)
        {
            Subjects = Subjects.OrderBy(s => s.Id).ToList();
            sortId = !sortId;
        }
        else
        {
            Subjects = Subjects.OrderByDescending(s => s.Id).ToList();
            sortId = !sortId;
        }
    }
    private void SortName()
    {
        if (sortName)
        {
            Subjects = Subjects.OrderBy(s => s.Name).ToList();
            sortName = !sortName;
        }
        else
        {
            Subjects = Subjects.OrderByDescending(s => s.Name).ToList();
            sortName = !sortName;
        }
    }
    private void SortPrice()
    {
        if (sortPrice)
        {
            Subjects = Subjects.OrderBy(s => s.Price).ToList();
            sortPrice = !sortPrice;
        }
        else
        {
            Subjects = Subjects.OrderByDescending(s => s.Price).ToList();
            sortPrice = !sortPrice;
        }
    }
    private void SortDur()
    {
        if (sortDur)
        {
            Subjects = Subjects.OrderBy(s => s.Duration).ToList();
            sortDur = !sortDur;
        }
        else
        {
            Subjects = Subjects.OrderByDescending(s => s.Duration).ToList();
            sortDur = !sortDur;
        }
    }
    private void SortStatus()
    {
        if (sortStatus)
        {
            Subjects = Subjects.OrderBy(s => s.IsShown).ToList();
            sortStatus = !sortStatus;
        }
        else
        {
            Subjects = Subjects.OrderByDescending(s => s.IsShown).ToList();
            sortStatus = !sortStatus;
        }
    }
    #endregion
}
