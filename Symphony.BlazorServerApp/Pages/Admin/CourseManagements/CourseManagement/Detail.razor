@page "/admin/course/{id:int}"

@using Symphony.ViewModels.CourseViewModel
@using Symphony.BlazorServerApp.Services.SubjectServices
@using Symphony.BlazorServerApp.Services.CourseServices
@using Symphony.BlazorServerApp.Controls.UploadComponents

@inject ICourseService courseService
@inject ISubjectService subjectService

<AuthorizeView Roles="admin">
    <Authorized>
        <div class="container-lg">
            <h1 class="text-center fw-bolder">Course Manager</h1>
            <p class="py-2 text-primary text-center">updated: @Course.UpdatedAt.Humanize()</p>
            <div class="main-content flex">
                <ul>
                    <li>
                        <span class="fw-bolder pe-2">@nameof(Course.Id):</span>@Course.Id
                    </li>
                    <li>
                        <span class="fw-bolder pe-2">@nameof(Course.Name):</span>@Course.Name
                    </li>
                    <li>
                        <span class="fw-bolder pe-2">@nameof(Course.DetailDescription):</span>@Course.DetailDescription
                    </li>
                    <li>
                        <span class="fw-bolder pe-2">@nameof(Course.StartDate):</span>@Course.StartDate.ToShortDateString()
                    </li>
                    <li>
                        <span class="fw-bolder pe-2">@nameof(Course.EndDate):</span>@Course.EndDate.ToShortDateString()
                    </li>
                    <li>
                        <span class="fw-bolder pe-2">@nameof(Course.Price):</span>$ @Course.Price
                    </li>
                    <li>
                        <span class="fw-bolder pe-2">@nameof(Course.IsBasic):</span>@(Course.IsBasic ? "Beginner" : "Advanced")
                    </li>
                    <li>
                        <span class="fw-bolder pe-2">@nameof(Course.IsShown):</span>@(Course.IsShown ? "Active" : "InActive")
                    </li>
                    <li>
                        <span class="fw-bolder pe-2">@nameof(Course.CreatedAt):</span>@Course.CreatedAt.ToShortDateString()
                    </li>
                    <li>
                        <span class="fw-bolder pe-2">@nameof(Course.UpdatedAt):</span>@Course.UpdatedAt.ToShortDateString()
                    </li>
                </ul>
                <aside>
                    <div class="subject-image">
                        @if (Course.ImagePath is not null)
                        {
                            <div class="images">
                                <img class="rounded-2" src="http:/localhost:39699/@Course.ImagePath" />
                            </div>
                        }
                        else
                        {
                            <p>There is no image upload for this Course yet. <a href="#imageUp">Upload one?</a></p>
                        }
                    </div>
                </aside>
            </div>
            <div class="upload">
                <CourseImageComponent Course="@Course" />
            </div>
            <div class="navigator flex">
                <div>
                    <a href="admin/course" class="back">
                        Go back to course manager <span class="ps-3 material-icons">chevron_left</span>
                    </a>
                </div>
                <div>
                    <a href="admin/course/edit/@Course.Id" class="edit">
                        Edit this course <span class="ps-3 material-icons">edit</span>
                    </a>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <UnauthorizedAccess />
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public int Id { get; set; }
    private CourseWithSubjects Course { get; set; } = new();
    private SubjectVM Subject { get; set; } = new();
    private List<SimpleSubjectVM> Subjects { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        Course = await courseService.GetCourseVMAsync(id: Id);
        Subjects = Course.SimpleSubjectVMs;

    }
}
