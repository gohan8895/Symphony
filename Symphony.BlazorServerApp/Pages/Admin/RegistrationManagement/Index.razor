@page "/admin/registration"

@using Symphony.BlazorServerApp.Services.CourseRegistrationService
@using Symphony.BlazorServerApp.Controls.TableComponents

@inject ICourseRegistrationService courseRegService;
@inject NavigationManager nav

<AuthorizeView Roles="admin">
    <Authorized>
        <div class="container-lg">
            <h1 class="text-center fw-bolder">Registration Manager</h1>
            <CreateButton Url="/admin/subject/create" Who="a New Registration" />
            <TableTemplate Caption="Course Registrations" Items="Registrations" Context="reg">
                <TableHeader>
                    <th>
                        <span @onclick="SortId" class="flex">
                            @nameof(Registration.Id)
                            <span class="ps-1 material-icons hover-me">
                                @(sortId ? "arrow_downward" : "arrow_upward")
                            </span>
                        </span>
                    </th>
                    <th>
                        Student Name
                    </th>
                    <th>
                        <span @onclick="SortCourse" class="flex">
                            Course ID
                            <span class="ps-1 material-icons hover-me">
                                @(sortCourse ? "arrow_downward" : "arrow_upward")
                            </span>
                        </span>
                    </th>
                    <th>
                        <span @onclick="SortIsApp" class="flex">
                            Approval Status
                            <span class="ps-1 material-icons hover-me">
                                @(sortIsApp ? "arrow_downward" : "arrow_upward")
                            </span>
                        </span>
                    </th>
                    <th>
                        <span @onclick="SortExam" class="flex">
                            Entrance Exam
                            <span class="ps-1 material-icons hover-me">
                                @(sortExamReg ? "arrow_downward" : "arrow_upward")
                            </span>
                        </span>
                    </th>
                    <th>
                        <div @onclick="SortCreatedAt" class="flex">
                            Registered At
                            <span class="ps-1 material-icons hover-me">
                                @(sortCreatedAt ? "arrow_downward" : "arrow_upward")
                            </span>
                        </div>
                    </th>
                    <th>Update Status</th>
                </TableHeader>
                <RowTemplate>
                    <td>
                        <a class="reg-name fw-bold" href="/admin/registration/@reg.Id">@reg.Id</a>
                    </td>

                    <td>@reg.AppUserVM.FirstName @reg.AppUserVM.LastName</td>
                    <td>@reg.CourseId</td>
                    <td>
                        @reg.IsApproved
                    </td>
                    <td>@(reg.ExamRequired ? "Required" : "Not Required")</td>
                    <td>@reg.CreatedAt.ToString("MM/dd/yyyy HH:mm:ss")</td>
                    <td class="text-center flex justify-content-center">
                        <a class="btn material-icons text-warning"
                           data-bs-toggle="modal" data-bs-target="#exampleModal"
                           title="Change this registration approve status"
                           @onclick="() => { CourseRegId = reg.Id; IsDelete = false; }">update</a>
                        <a class="btn material-icons text-danger"
                           data-bs-toggle="modal"
                           title="Change this registration approve status"
                           data-bs-target="#exampleModal" @onclick="() => { CourseRegId = reg.Id; IsDelete = true; }">delete</a>
                    </td>
                </RowTemplate>
            </TableTemplate>
            <!-- Modal -->
            <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">@(IsDelete ? "Remove Registration" : "Change Approve Status")</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            @if (IsDelete)
                            {
                                <p>Do you want to remove this registration?</p>
                            }
                            else
                            {
                                <p>Do you want to change this registration status?</p>
                            }
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">No</button>

                            @if (IsDelete)
                            {
                                <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="() => RemoveReg(CourseRegId)">
                                    Yes
                                </button>
                            }
                            else
                            {
                                <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="() => ChangeStatus(CourseRegId)">
                                    Yes
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <UnauthorizedAccess />
    </NotAuthorized>
</AuthorizeView>

@code {
    #region param & prop
    public List<CourseRegistrationWithDataVM> Registrations { get; set; } = new();
    public CourseRegistrationVM Registration { get; set; }
    public int CourseRegId { get; set; }
    public bool IsDelete { get; set; }
    #endregion

    #region other
    private bool sortId = false;
    private bool sortCourse = false;
    private bool sortIsApp = false;
    private bool sortCreatedAt = true;
    private bool sortExamReg = true;
    private bool approveStatus;
    #endregion

    protected async override Task OnInitializedAsync()
    {
        Registrations = (await courseRegService.GetCourseRegistrationWithDataVMsAsync()).ToList();
    }

    private async Task ChangeStatus(int id)
    {
        var status = Registrations.FirstOrDefault(r => r.Id == id).IsApproved;
        if (id != 0) await courseRegService.UpdateAsync(id);

        Registrations.FirstOrDefault(r => r.Id == id).IsApproved = !status;

        CourseRegId = 0;
    }

    private async Task RemoveReg(int id)
    {
        var reg = Registrations.FirstOrDefault(r => r.Id == id);
        if (id != 0) await courseRegService.DeleteAsync(id);
        Registrations.Remove(reg);
        CourseRegId = 0;
    }

    #region fiter logic
    private void SortId()
    {
        if (sortId)
        {
            Registrations = Registrations.OrderBy(r => r.Id).ToList();
            sortId = !sortId;
        }
        else
        {
            Registrations = Registrations.OrderByDescending(r => r.Id).ToList();
            sortId = !sortId;
        }
    }
    private void SortCourse()
    {
        if (sortCourse)
        {
            Registrations = Registrations.OrderBy(r => r.CourseId).ToList();
            sortCourse = !sortCourse;
        }
        else
        {
            Registrations = Registrations.OrderByDescending(r => r.CourseId).ToList();
            sortCourse = !sortCourse;
        }
    }
    private void SortIsApp()
    {
        if (sortIsApp)
        {
            Registrations = Registrations.OrderBy(r => r.IsApproved).ToList();
            sortIsApp = !sortIsApp;
        }
        else
        {
            Registrations = Registrations.OrderByDescending(r => r.IsApproved).ToList();
            sortIsApp = !sortIsApp;
        }
    }
    private void SortExam()
    {
        if (sortExamReg)
        {
            Registrations = Registrations.OrderBy(r => r.ExamRequired).ToList();
            sortExamReg = !sortExamReg;
        }
        else
        {
            Registrations = Registrations.OrderByDescending(r => r.ExamRequired).ToList();
            sortExamReg = !sortExamReg;
        }
    }
    private void SortCreatedAt()
    {
        if (sortCreatedAt)
        {
            Registrations = Registrations.OrderBy(r => r.CreatedAt).ToList();
            sortCreatedAt = !sortCreatedAt;
        }
        else
        {
            Registrations = Registrations.OrderByDescending(r => r.CreatedAt).ToList();
            sortCreatedAt = !sortCreatedAt;
        }
    }
    #endregion
}