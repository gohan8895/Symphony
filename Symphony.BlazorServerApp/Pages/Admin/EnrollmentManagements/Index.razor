@page "/admin/enrollment"

@using Symphony.BlazorServerApp.Services.EnrollmentServices
@using Symphony.BlazorServerApp.Controls.TableComponents

@inject IEnrollmentService enrollService

<AuthorizeView Roles="admin">
    <Authorized>
        <div class="container-lg">
            <h1 class="text-center fw-bolder">Enrollment Manager</h1>
            @if (Enrollments is null)
            {
                <div class="text-center">
                    <div class="loadingio-spinner-bars-f8jbu6upslt">
                        <div class="ldio-p5olh5z9oq">
                            <div></div><div></div><div></div><div></div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <TableTemplate Caption="Enrollments" Items="Enrollments" Context="en">
                    <TableHeader>
                        <th>
                            <span @onclick="SortId" class="flex">
                                @nameof(Enrollment.Id)
                                <span class="ps-1 material-icons hover-me">
                                    @(sortId ? "arrow_downward" : "arrow_upward")
                                </span>
                            </span>
                        </th>
                        <th>
                            Student Email
                        </th>
                        <th>
                            <span @onclick="SortCourse" class="flex">
                                Course ID
                                <span class="ps-1 material-icons hover-me">
                                    @(sortCourse ? "arrow_downward" : "arrow_upward")
                                </span>
                            </span>
                        </th>
                        <th>
                            <div @onclick="SortCreatedAt" class="flex">
                                Registered At
                                <span class="ps-1 material-icons hover-me">
                                    @(sortCreatedAt ? "arrow_downward" : "arrow_upward")
                                </span>
                            </div>
                        </th>
                        <th>
                            <div @onclick="SortUpdatedAt" class="flex">
                                Updated At
                                <span class="ps-1 material-icons hover-me">
                                    @(sortUpdatedAt ? "arrow_downward" : "arrow_upward")
                                </span>
                            </div>
                        </th>
                        <th>Update Status</th>
                    </TableHeader>
                    <RowTemplate>
                        <td>
                            <a class="en-name fw-bold" href="/admin/enrollment/@en.Id">@en.Id</a>
                        </td>
                        <td>@en.AppUserVM.Email</td>
                        <td>@en.CourseId</td>
                        <td>@en.CreatedAt.ToLongDateString()</td>
                        <td>@en.UpdatedAt.ToLongDateString()</td>
                        <td class="text-center flex justify-content-center">
                            <a class="btn material-icons text-warning"
                               data-bs-toggle="modal" data-bs-target="#exampleModal"
                               title="Change this enistration approve status"
                               @onclick="() => { userId = en.UserId; courseId = en.CourseId; }">update</a>
                        </td>
                    </RowTemplate>
                </TableTemplate>
                <!-- Modal -->
                <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Change Enrollment Status</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <p>Do you want to change this enrollment status?</p>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">No</button>
                                <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="() => ChangeStatus(userId, courseId)">
                                    Yes
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <UnauthorizedAccess />
    </NotAuthorized>
</AuthorizeView>

@code {
    #region param & prop
    public List<EnrollmentWithData> Enrollments { get; set; }
    public EnrollmentVM Enrollment { get; set; }
    public Guid userId { get; set; }
    public int courseId { get; set; }
    #endregion

    #region other
    private bool sortId = false;
    private bool sortCourse = false;
    private bool sortStatus = false;
    private bool sortCreatedAt = true;
    private bool sortUpdatedAt = true;
    #endregion

    protected async override Task OnInitializedAsync()
    {
        Enrollments = (await enrollService.GetEnrollmentWithDataVM()).Where(e => e.IsDelete == false).ToList();
    }

    private async Task ChangeStatus(Guid studentId, int id)
    {
        var enrollment = Enrollments.FirstOrDefault(r => r.UserId == studentId && r.CourseId == courseId);
        if (id != 0) await enrollService.ChangeEnrollmentStatus(studentId, id);

        Enrollments.Remove(enrollment);
    }

    #region fiter logic
    private void SortId()
    {
        if (sortId)
        {
            Enrollments = Enrollments.OrderBy(r => r.Id).ToList();
            sortId = !sortId;
        }
        else
        {
            Enrollments = Enrollments.OrderByDescending(r => r.Id).ToList();
            sortId = !sortId;
        }
    }
    private void SortCourse()
    {
        if (sortCourse)
        {
            Enrollments = Enrollments.OrderBy(r => r.CourseId).ToList();
            sortCourse = !sortCourse;
        }
        else
        {
            Enrollments = Enrollments.OrderByDescending(r => r.CourseId).ToList();
            sortCourse = !sortCourse;
        }
    }
    private void SortStatus()
    {
        if (sortStatus)
        {
            Enrollments = Enrollments.OrderBy(r => r.IsDelete).ToList();
            sortStatus = !sortStatus;
        }
        else
        {
            Enrollments = Enrollments.OrderByDescending(r => r.IsDelete).ToList();
            sortStatus = !sortStatus;
        }
    }

    private void SortCreatedAt()
    {
        if (sortCreatedAt)
        {
            Enrollments = Enrollments.OrderBy(r => r.CreatedAt).ToList();
            sortCreatedAt = !sortCreatedAt;
        }
        else
        {
            Enrollments = Enrollments.OrderByDescending(r => r.CreatedAt).ToList();
            sortCreatedAt = !sortCreatedAt;
        }
    }

    private void SortUpdatedAt()
    {
        if (sortUpdatedAt)
        {
            Enrollments = Enrollments.OrderBy(r => r.UpdatedAt).ToList();
            sortUpdatedAt = !sortUpdatedAt;
        }
        else
        {
            Enrollments = Enrollments.OrderByDescending(r => r.UpdatedAt).ToList();
            sortUpdatedAt = !sortUpdatedAt;
        }
    }
    #endregion
}