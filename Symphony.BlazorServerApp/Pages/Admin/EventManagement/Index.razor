@page "/admin/event"

@inject IEventService eventService
@using Symphony.ViewModels.Consult
@using Symphony.BlazorServerApp.Services.EventServices
@using Symphony.BlazorServerApp.Controls.TableComponents 
@inject NavigationManager nav
@using Symphony.BlazorServerApp.Controls.Utilities

<AuthorizeView Roles="admin">
    <Authorized>
        @if (events == null)
        {

           <LoadingComponent />

        }
        else
        {

            <div class="container-fluid">
                <h1 class="text-center fw-bolder">News Manager</h1>
                <CreateButton Url="admin/eventManagement/createevent" Who="a New Event" />
                <TableTemplate Caption="Event" Items="events" Context="item">
                    <TableHeader>
                        <td><p>@nameof(Event.Title)</p></td>
                        <td><p>@nameof(Event.Description)</p></td>
                        <td><p>@nameof(Event.IsShown)</p></td>
                    </TableHeader>
                    <RowTemplate>
                        <td><p>@item.Title</p></td>
                        <td><p>@item.Description</p></td>
                        <td><p>@item.IsShown</p></td>
                        <td class="text-center">
                            <NavLink href=@($"/admin/eventManagement/editevent/{item.Id}") class="material-icons nav-item text-warning me-4">edit</NavLink>
                            <button @onclick="() => DeleteEvent(item.Id)" class="btn material-icons nav-item text-danger me-2">delete</button>
                        </td>
                    </RowTemplate>
                </TableTemplate>
            </div>
        }

    </Authorized>
</AuthorizeView>

@code {
    private List<EventVM> events = null;
    
    private bool render = false;
    protected async override Task OnInitializedAsync()
    {
        var result = await eventService.GetEventsAsync();
         events = result.ToList();
    }

    private async Task DeleteEvent(int id)
    {
        var item = await eventService.GetEventAsync(id);

        if (item is not null) await eventService.DeleteEventAsync(id);
        render = !render;
    }
}